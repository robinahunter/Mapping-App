import{a1 as n,P as p,a2 as m,e as i,y as o,a3 as l,c as d}from"./index-HGtVpWyZ.js";import{E as c}from"./I3SMeshView3D-U_F82iSo.js";import{n as u}from"./LayerView3D-5KMCXBaU.js";import{u as h}from"./LayerView-USA0KoIi.js";import"./I3SOverrides-nnj71O2V.js";import"./I3SNode-Ewy4ptXL.js";import"./I3SUtil-I-P8L-0q.js";import"./I3SBinaryReader-LXyKwNOg.js";import"./ReactiveSet-PlNUhcpU.js";import"./meshFeatureSet-agvhiR57.js";import"./External-eOuR7mKt.js";import"./FeatureLayerView3D-4rM6TNs2.js";import"./FeatureLayerViewBase3D-fbcIxlMy.js";import"./HeatmapDensity.glsl-adtghN0B.js";import"./dehydratedFeatureComparison--fl8hy-2.js";import"./queryForSymbologySnapping-ZqjQ9rPa.js";import"./elevationInfoUtils-JPzsSOw9.js";import"./hash-SS5GKVPY.js";import"./Graphics3DObjectStates-0ioxILnM.js";import"./optimizedFeatureQueryEngineAdapter-Dm7PRfIQ.js";import"./PooledRBush-8HZAB-Y8.js";import"./quickselect-KItswMQL.js";import"./popupUtils-F-NiwM3H.js";import"./floorFilterUtils-zOdaZIyV.js";import"./QueryEngine-bkJ_dLp0.js";import"./WhereClause-XxSVFoZm.js";import"./TimeOnly-gdzd1X4O.js";import"./json-v6EOeNTY.js";import"./QueryEngineCapabilities-PzVpW5yD.js";import"./utils-m0Z_B5gK.js";import"./utils-gEImGgo_.js";import"./generateRendererUtils-B7NhQ2zU.js";import"./FeatureStore-WF6qE-7Q.js";import"./BoundsStore-KiS-ZZv1.js";import"./projectExtentUtils-FPkfwpWN.js";import"./query-lIzokT_P.js";import"./pbfQueryUtils-wMuKafY8.js";import"./pbf-BFEbk-fn.js";import"./EventedSet-eEaNUd7N.js";import"./RefreshableLayerView-rwmTAYZh.js";import"./SceneModification-79jkyXtb.js";import"./persistable-Uc9ZRbsZ.js";import"./multiOriginJSONSupportUtils-R5XHSAtL.js";import"./resourceExtension-g3V50KpN.js";import"./SceneLayerWorker-ruvnP4Qf.js";const g=.2;let r=class extends c(u(h)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this.drapeTargetType=n.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var t;return((t=this._controller)==null?void 0:t.updatingProgress)??0}get lodFactor(){var t,e,a,s;return((s=(a=(e=(t=this.view)==null?void 0:t.qualitySettings)==null?void 0:e.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?g:1}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this._updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){const t=new m;return t.layer=this.layer,t.sourceLayer=this.layer,t}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.removeHandles("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const t=this.layer.modifications;this.addHandles(this._updatingHandles.addOnCollectionChange(()=>t,()=>this._modifications=t.toArray(),p),"modifications")}};i([o()],r.prototype,"layer",void 0),i([o()],r.prototype,"i3slayer",null),i([o(l)],r.prototype,"updatingProgress",void 0),i([o()],r.prototype,"updatingProgressValue",null),i([o()],r.prototype,"lodFactor",null),i([o({readOnly:!0})],r.prototype,"progressiveLoadFactor",null),r=i([d("esri.views.3d.layers.SceneLayerView3D")],r);const pt=r;export{pt as default};
