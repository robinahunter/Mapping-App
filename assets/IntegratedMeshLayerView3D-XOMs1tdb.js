import{a1 as n,P as p,a2 as m,e as i,y as o,a3 as l,c as d}from"./index-zn_PrNsw.js";import{E as c}from"./I3SMeshView3D-2vwVsMFn.js";import{n as u}from"./LayerView3D-wvlle9OY.js";import{u as h}from"./LayerView-o-9M3t23.js";import"./I3SOverrides-x2lhyHpr.js";import"./I3SNode-cYskZYWC.js";import"./I3SUtil-Kvp-HIj8.js";import"./I3SBinaryReader-BAZ28Cb4.js";import"./ReactiveSet-S91qVdKr.js";import"./meshFeatureSet-qrH8K5Kd.js";import"./External-KsZCsttD.js";import"./FeatureLayerView3D-iqtXX5x0.js";import"./FeatureLayerViewBase3D-wh0_R-EJ.js";import"./HeatmapDensity.glsl-qGOcQOsR.js";import"./dehydratedFeatureComparison-CLwmvOod.js";import"./queryForSymbologySnapping-5suaJmPz.js";import"./elevationInfoUtils-arG0Vhwc.js";import"./hash-SS5GKVPY.js";import"./Graphics3DObjectStates-oxF3Md70.js";import"./optimizedFeatureQueryEngineAdapter-EO1wPz4V.js";import"./PooledRBush-VS-hLCYy.js";import"./quickselect-yfQ4oTsk.js";import"./popupUtils-K_O1QLm4.js";import"./floorFilterUtils-zOdaZIyV.js";import"./QueryEngine-sM0g8PYM.js";import"./WhereClause-px7fSXr_.js";import"./TimeOnly-mT8sqvOI.js";import"./json-v6EOeNTY.js";import"./QueryEngineCapabilities-PzVpW5yD.js";import"./utils-cdlW-z33.js";import"./utils-CIjkWpsC.js";import"./generateRendererUtils-OLbaQWu_.js";import"./FeatureStore-KAUcmBTz.js";import"./BoundsStore-v9aauHGu.js";import"./projectExtentUtils-1nM2a04p.js";import"./query-WhnJGD5x.js";import"./pbfQueryUtils-Uj-u1qAn.js";import"./pbf-4hQGdT-n.js";import"./EventedSet-HrHbRJtI.js";import"./RefreshableLayerView-w98wbw7-.js";import"./SceneModification-m98cWhHg.js";import"./persistable-BqRy7hdW.js";import"./multiOriginJSONSupportUtils-R5XHSAtL.js";import"./resourceExtension-QX-GTJCm.js";import"./SceneLayerWorker-Xlotp8U8.js";const g=.2;let r=class extends c(u(h)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this.drapeTargetType=n.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var t;return((t=this._controller)==null?void 0:t.updatingProgress)??0}get lodFactor(){var t,e,a,s;return((s=(a=(e=(t=this.view)==null?void 0:t.qualitySettings)==null?void 0:e.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?g:1}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this._updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){const t=new m;return t.layer=this.layer,t.sourceLayer=this.layer,t}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.removeHandles("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const t=this.layer.modifications;this.addHandles(this._updatingHandles.addOnCollectionChange(()=>t,()=>this._modifications=t.toArray(),p),"modifications")}};i([o()],r.prototype,"layer",void 0),i([o()],r.prototype,"i3slayer",null),i([o(l)],r.prototype,"updatingProgress",void 0),i([o()],r.prototype,"updatingProgressValue",null),i([o()],r.prototype,"lodFactor",null),i([o({readOnly:!0})],r.prototype,"progressiveLoadFactor",null),r=i([d("esri.views.3d.layers.SceneLayerView3D")],r);const pt=r;export{pt as default};
