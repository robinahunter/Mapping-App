import{a1 as n,P as p,a2 as m,e as i,y as o,a3 as l,c as d}from"./index-kbr3zr1H.js";import{E as c}from"./I3SMeshView3D-VK1_6Lkv.js";import{n as u}from"./LayerView3D-tJhA8Nlj.js";import{u as h}from"./LayerView-_EY-ELBU.js";import"./I3SOverrides-djufG6ys.js";import"./I3SNode-TnVAsEue.js";import"./I3SUtil-j1m3Pt_J.js";import"./I3SBinaryReader-5uSEdTdw.js";import"./ReactiveSet-y2hOlW1q.js";import"./meshFeatureSet-uh6s1ECg.js";import"./External-Ibxg3wv1.js";import"./FeatureLayerView3D-gU14xF-t.js";import"./FeatureLayerViewBase3D-2YeowG-n.js";import"./HeatmapDensity.glsl-eo8sS8tq.js";import"./dehydratedFeatureComparison-CRAej4jN.js";import"./queryForSymbologySnapping-YxzBZTnr.js";import"./elevationInfoUtils--aHlBlZD.js";import"./hash-SS5GKVPY.js";import"./Graphics3DObjectStates--gql9Tlz.js";import"./optimizedFeatureQueryEngineAdapter-Tny9QCxV.js";import"./PooledRBush-XbeoGqTh.js";import"./quickselect-EaimBy6c.js";import"./popupUtils-sniMtGDQ.js";import"./floorFilterUtils-zOdaZIyV.js";import"./QueryEngine-l9-6FZdV.js";import"./WhereClause-ytp4Dq7A.js";import"./TimeOnly-cZOrRFGO.js";import"./json-v6EOeNTY.js";import"./QueryEngineCapabilities-PzVpW5yD.js";import"./utils-n9g4Q-zv.js";import"./utils-C-4l0L6O.js";import"./generateRendererUtils-JDwiKBL2.js";import"./FeatureStore-J1_nba82.js";import"./BoundsStore-1UVb2Vh2.js";import"./projectExtentUtils-MvHietPs.js";import"./query-9Ukb-d_e.js";import"./pbfQueryUtils-9bZ_rIzd.js";import"./pbf-jyKbi70X.js";import"./EventedSet-CsIE7Kdd.js";import"./RefreshableLayerView-kpg7GjiI.js";import"./SceneModification-lU1sbzNN.js";import"./persistable-a_aA8iAt.js";import"./multiOriginJSONSupportUtils-R5XHSAtL.js";import"./resourceExtension-faix4pAR.js";import"./SceneLayerWorker-XVJw1q_w.js";const g=.2;let r=class extends c(u(h)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this.drapeTargetType=n.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var t;return((t=this._controller)==null?void 0:t.updatingProgress)??0}get lodFactor(){var t,e,a,s;return((s=(a=(e=(t=this.view)==null?void 0:t.qualitySettings)==null?void 0:e.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?g:1}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this._updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){const t=new m;return t.layer=this.layer,t.sourceLayer=this.layer,t}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.removeHandles("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const t=this.layer.modifications;this.addHandles(this._updatingHandles.addOnCollectionChange(()=>t,()=>this._modifications=t.toArray(),p),"modifications")}};i([o()],r.prototype,"layer",void 0),i([o()],r.prototype,"i3slayer",null),i([o(l)],r.prototype,"updatingProgress",void 0),i([o()],r.prototype,"updatingProgressValue",null),i([o()],r.prototype,"lodFactor",null),i([o({readOnly:!0})],r.prototype,"progressiveLoadFactor",null),r=i([d("esri.views.3d.layers.SceneLayerView3D")],r);const pt=r;export{pt as default};
