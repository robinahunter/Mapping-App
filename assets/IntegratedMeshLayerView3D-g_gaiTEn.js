import{a1 as n,P as p,a2 as m,e as i,y as o,a3 as l,c as d}from"./index-Miu9Hlj4.js";import{E as c}from"./I3SMeshView3D-Dt_-CtBV.js";import{n as u}from"./LayerView3D-wjvnuhmQ.js";import{u as h}from"./LayerView-_ulkdQg4.js";import"./I3SOverrides-YjTorJYr.js";import"./I3SNode-6mnNzJbt.js";import"./I3SUtil-_r5d4zPk.js";import"./I3SBinaryReader-PD3qbLly.js";import"./ReactiveSet-BYhEkpGl.js";import"./meshFeatureSet-1Kkz-SYP.js";import"./External-g62LhqJk.js";import"./FeatureLayerView3D-Qc7PKeKK.js";import"./FeatureLayerViewBase3D-8wFR5Xbs.js";import"./HeatmapDensity.glsl--Xx2dxpW.js";import"./dehydratedFeatureComparison-8ozxCp1k.js";import"./queryForSymbologySnapping-J6yEeg3u.js";import"./elevationInfoUtils-uBsd9Qx7.js";import"./hash-SS5GKVPY.js";import"./Graphics3DObjectStates-y8J81BCJ.js";import"./optimizedFeatureQueryEngineAdapter-ieXdIIYl.js";import"./PooledRBush-OVfXnVkZ.js";import"./quickselect-1hxW-zGE.js";import"./popupUtils-AXB0V6cC.js";import"./floorFilterUtils-zOdaZIyV.js";import"./QueryEngine-ySvD6Ibi.js";import"./WhereClause-gbGGpxZY.js";import"./TimeOnly-z-rpfDVW.js";import"./json-v6EOeNTY.js";import"./QueryEngineCapabilities-PzVpW5yD.js";import"./utils-zbRabazr.js";import"./utils-63XsB0Iz.js";import"./generateRendererUtils-E1PRV5Jf.js";import"./FeatureStore-Bc-85Og-.js";import"./BoundsStore-RwsWXZtG.js";import"./projectExtentUtils-kdZ4WHBE.js";import"./query-1a3Xj15K.js";import"./pbfQueryUtils-KGWNQqJh.js";import"./pbf-Vxp-ktKT.js";import"./EventedSet-yMLgyCfv.js";import"./RefreshableLayerView-spIfKrKn.js";import"./SceneModification-vOkZ9Fcp.js";import"./persistable-h77T9fey.js";import"./multiOriginJSONSupportUtils-R5XHSAtL.js";import"./resourceExtension-jHRu_Ksd.js";import"./SceneLayerWorker-Y59p288h.js";const g=.2;let r=class extends c(u(h)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this.drapeTargetType=n.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var t;return((t=this._controller)==null?void 0:t.updatingProgress)??0}get lodFactor(){var t,e,a,s;return((s=(a=(e=(t=this.view)==null?void 0:t.qualitySettings)==null?void 0:e.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?g:1}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this._updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){const t=new m;return t.layer=this.layer,t.sourceLayer=this.layer,t}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.removeHandles("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const t=this.layer.modifications;this.addHandles(this._updatingHandles.addOnCollectionChange(()=>t,()=>this._modifications=t.toArray(),p),"modifications")}};i([o()],r.prototype,"layer",void 0),i([o()],r.prototype,"i3slayer",null),i([o(l)],r.prototype,"updatingProgress",void 0),i([o()],r.prototype,"updatingProgressValue",null),i([o()],r.prototype,"lodFactor",null),i([o({readOnly:!0})],r.prototype,"progressiveLoadFactor",null),r=i([d("esri.views.3d.layers.SceneLayerView3D")],r);const pt=r;export{pt as default};
