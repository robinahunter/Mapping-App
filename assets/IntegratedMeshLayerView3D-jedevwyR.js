import{a1 as n,P as p,a2 as m,e as i,y as o,a3 as l,c as d}from"./index-wBDG9IEV.js";import{E as c}from"./I3SMeshView3D-8nbO8OC8.js";import{n as u}from"./LayerView3D-PzScts59.js";import{u as h}from"./LayerView-ybGzocYI.js";import"./I3SOverrides-DY5sdzi1.js";import"./I3SNode-RfOZy7kc.js";import"./I3SUtil-MOJymjK_.js";import"./I3SBinaryReader-y_PAgrEK.js";import"./ReactiveSet-imPTSe34.js";import"./meshFeatureSet-Ms8QAs_u.js";import"./External-O4fqonA6.js";import"./FeatureLayerView3D-FI8r2Cf1.js";import"./FeatureLayerViewBase3D-SdigzjQ8.js";import"./HeatmapDensity.glsl-6Jc5JlcC.js";import"./dehydratedFeatureComparison-G5X4Vorz.js";import"./queryForSymbologySnapping-y2ABNsfy.js";import"./elevationInfoUtils-kRMMd8uD.js";import"./hash-SS5GKVPY.js";import"./Graphics3DObjectStates-DLW8jtSh.js";import"./optimizedFeatureQueryEngineAdapter-hgTw-wXS.js";import"./PooledRBush-__d6IZtp.js";import"./quickselect-_idPWoTB.js";import"./popupUtils-xgqBgAvI.js";import"./floorFilterUtils-zOdaZIyV.js";import"./QueryEngine-Zd1wfRnf.js";import"./WhereClause-82MIv0qK.js";import"./TimeOnly-pwDUJCDi.js";import"./json-v6EOeNTY.js";import"./QueryEngineCapabilities-PzVpW5yD.js";import"./utils-Jq1wrXds.js";import"./utils-bVA4d-VL.js";import"./generateRendererUtils-J91WnBNh.js";import"./FeatureStore-vv5ZD1yA.js";import"./BoundsStore-RK79hs2x.js";import"./projectExtentUtils-SEauB5rm.js";import"./query-wrVM73Sf.js";import"./pbfQueryUtils-1CyeHK9e.js";import"./pbf-KICMQxy-.js";import"./EventedSet-W8pA_q3q.js";import"./RefreshableLayerView-vzSLfdoi.js";import"./SceneModification-C7Wy5gE1.js";import"./persistable--9UYk6ZJ.js";import"./multiOriginJSONSupportUtils-R5XHSAtL.js";import"./resourceExtension--aSEtuBt.js";import"./SceneLayerWorker-mQosRAJi.js";const g=.2;let r=class extends c(u(h)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this.drapeTargetType=n.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var t;return((t=this._controller)==null?void 0:t.updatingProgress)??0}get lodFactor(){var t,e,a,s;return((s=(a=(e=(t=this.view)==null?void 0:t.qualitySettings)==null?void 0:e.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?g:1}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this._updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){const t=new m;return t.layer=this.layer,t.sourceLayer=this.layer,t}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.removeHandles("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const t=this.layer.modifications;this.addHandles(this._updatingHandles.addOnCollectionChange(()=>t,()=>this._modifications=t.toArray(),p),"modifications")}};i([o()],r.prototype,"layer",void 0),i([o()],r.prototype,"i3slayer",null),i([o(l)],r.prototype,"updatingProgress",void 0),i([o()],r.prototype,"updatingProgressValue",null),i([o()],r.prototype,"lodFactor",null),i([o({readOnly:!0})],r.prototype,"progressiveLoadFactor",null),r=i([d("esri.views.3d.layers.SceneLayerView3D")],r);const pt=r;export{pt as default};
