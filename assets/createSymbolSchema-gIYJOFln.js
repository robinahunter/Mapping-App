import{n as V}from"./cimAnalyzer-Gxh6Jjlj.js";import{E as c,S as b}from"./enums-uQoFEhYh.js";import{f as h,_ as S,A as d}from"./SymbolProcessor-el6ZxWXG.js";import"./index-cX_5Pv6y.js";import"./labelPoint-ZfBvagNE.js";import"./number-sTjsTbdA.js";import"./BidiEngine-8z8MVveq.js";import"./Pipeline-2oqj4R_p.js";import"./QueryEngine-itgC_3PW.js";import"./WhereClause-8z1N8f_0.js";import"./TimeOnly-zUMgpMXn.js";import"./json-v6EOeNTY.js";import"./QueryEngineCapabilities-PzVpW5yD.js";import"./utils-iEV6_8mr.js";import"./utils-iCBUGz6T.js";import"./generateRendererUtils-vyquGL7h.js";import"./StreamFeatureManager-3g5AA-yg.js";import"./quickselect-UyHPG8pV.js";import"./ogcFeatureUtils-8TZMeurR.js";import"./geojson-i8Klt08e.js";import"./date-be_IQzZd.js";import"./clientSideDefaults-2KBsiX3d.js";import"./query-WEm5Jczp.js";import"./pbfQueryUtils-gWTTIzgK.js";import"./pbf-22719g11.js";import"./createConnection-QkfC73ro.js";import"./geohashUtils-U0jvYCSY.js";import"./tileUtils-ltBihaPe.js";import"./TurboLine-RpNYhL4p.js";import"./Rect-bBBxMtVp.js";import"./GeometryUtils-K2DOc0l8.js";function y(e){var t;return e.type==="line-marker"?{type:"line-marker",color:(t=e.color)==null?void 0:t.toJSON(),placement:e.placement,style:e.style}:e.constructor.fromJSON(e.toJSON()).toJSON()}function u(e){return d(e)}function x(e,t,r=!1){if(!e)return null;switch(e.type){case"simple-fill":case"picture-fill":return g(e,t,r);case"simple-marker":case"picture-marker":return E(e,t,r);case"simple-line":return z(e,t,r);case"text":return k(e,t,r);case"label":return K(e,t,r);case"cim":return{type:"cim",rendererKey:t.vvFlags,data:e.data,maxVVSize:t.maxVVSize};case"CIMSymbolReference":return{type:"cim",rendererKey:t.vvFlags,data:e,maxVVSize:t.maxVVSize};case"web-style":return{...y(e),type:"web-style",hash:e.hash(),rendererKey:t.vvFlags,maxVVSize:t.maxVVSize};default:throw new Error(`symbol not supported ${e.type}`)}}function K(e,t,r){const o=e.toJSON(),a=h(c.LABEL,{...t,placement:o.labelPlacement});return{materialKey:r?u(a):a,hash:e.hash(),...o,labelPlacement:o.labelPlacement}}function g(e,t,r){const o=h(c.FILL,t),a=r?u(o):o,i=e.clone(),m=i.outline,s=S(t.symbologyType);s||(i.outline=null);const p={materialKey:a,hash:i.hash(),...y(i)};if(s)return p;const l=[];if(l.push(p),m){const n=h(c.LINE,{...t,isOutline:!0}),f={materialKey:r?u(n):n,hash:m.hash(),...y(m)};l.push(f)}return{type:"composite-symbol",layers:l,hash:l.reduce((n,f)=>f.hash+n,"")}}function z(e,t,r){const o=S(t.symbologyType)?b.DEFAULT:t.symbologyType,a=h(c.LINE,{...t,symbologyType:o}),i=r?u(a):a,m=e.clone(),s=m.marker;m.marker=null;const p=[];if(p.push({materialKey:i,hash:m.hash(),...y(m)}),s){const l=h(c.MARKER,t),n=r?u(l):l;s.color=s.color??m.color,p.push({materialKey:n,hash:s.hash(),lineWidth:m.width,...y(s)})}return{type:"composite-symbol",layers:p,hash:p.reduce((l,n)=>n.hash+l,"")}}function E(e,t,r){if(e.type==="simple-marker"&&(e.style==="path"||e.outline&&e.outline.style!=="solid"&&e.outline.style!=="none"))return x({type:"CIMSymbolReference",symbol:V.fromSimpleMarker(e)},t,r);const o=h(c.MARKER,t),a=r?u(o):o,i=y(e);return{materialKey:a,hash:e.hash(),...i,angle:e.angle,maxVVSize:t.maxVVSize}}function k(e,t,r){const o=h(c.TEXT,t),a=r?u(o):o,i=y(e);return{materialKey:a,hash:e.hash(),...i,angle:e.angle,maxVVSize:t.maxVVSize}}export{x as createSymbolSchema};
