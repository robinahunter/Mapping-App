import{a1 as n,P as p,a2 as m,e as i,y as o,a3 as l,c as d}from"./index-vfDekpkj.js";import{E as c}from"./I3SMeshView3D-3mvS-x7K.js";import{n as u}from"./LayerView3D-3OLOzbev.js";import{u as h}from"./LayerView-zsYZBSdC.js";import"./I3SOverrides-302MRvFj.js";import"./I3SNode-nUZspKjB.js";import"./I3SUtil-Sej5MVh7.js";import"./I3SBinaryReader-7n0h6S_r.js";import"./ReactiveSet-5qS8kpdM.js";import"./meshFeatureSet-GBPzpy3y.js";import"./External-CUq-Goxx.js";import"./FeatureLayerView3D-2XOwQf2D.js";import"./FeatureLayerViewBase3D-lxBvYPmY.js";import"./HeatmapDensity.glsl-IGgadICg.js";import"./dehydratedFeatureComparison-xBWFxG3B.js";import"./queryForSymbologySnapping-GYqpciIf.js";import"./elevationInfoUtils-hSlU3vcl.js";import"./hash-SS5GKVPY.js";import"./Graphics3DObjectStates-BpBk1Pvw.js";import"./optimizedFeatureQueryEngineAdapter-t2gigFY5.js";import"./PooledRBush-NDnp8lOK.js";import"./quickselect-Pxxs4hcl.js";import"./popupUtils-IRlx1D9P.js";import"./floorFilterUtils-zOdaZIyV.js";import"./QueryEngine-yEX5n0CS.js";import"./WhereClause-SmAwLThU.js";import"./TimeOnly-V056MUke.js";import"./json-v6EOeNTY.js";import"./QueryEngineCapabilities-PzVpW5yD.js";import"./utils-SrIULlna.js";import"./utils-zTOpf4YR.js";import"./generateRendererUtils-CSIVuDn8.js";import"./FeatureStore-9Qv7j55q.js";import"./BoundsStore-4Qka-j2M.js";import"./projectExtentUtils-d4Oiu7fL.js";import"./query-xE5WvBwJ.js";import"./pbfQueryUtils-NX5PHouN.js";import"./pbf-jCDGKzVk.js";import"./EventedSet-sEWRF_B7.js";import"./RefreshableLayerView-4yHXZcNt.js";import"./SceneModification-zPhFcLPz.js";import"./persistable-gH0HYwPr.js";import"./multiOriginJSONSupportUtils-R5XHSAtL.js";import"./resourceExtension-yDPY7HSi.js";import"./SceneLayerWorker-apUPiKiv.js";const g=.2;let r=class extends c(u(h)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this.drapeTargetType=n.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var t;return((t=this._controller)==null?void 0:t.updatingProgress)??0}get lodFactor(){var t,e,a,s;return((s=(a=(e=(t=this.view)==null?void 0:t.qualitySettings)==null?void 0:e.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?g:1}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this._updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){const t=new m;return t.layer=this.layer,t.sourceLayer=this.layer,t}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.removeHandles("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const t=this.layer.modifications;this.addHandles(this._updatingHandles.addOnCollectionChange(()=>t,()=>this._modifications=t.toArray(),p),"modifications")}};i([o()],r.prototype,"layer",void 0),i([o()],r.prototype,"i3slayer",null),i([o(l)],r.prototype,"updatingProgress",void 0),i([o()],r.prototype,"updatingProgressValue",null),i([o()],r.prototype,"lodFactor",null),i([o({readOnly:!0})],r.prototype,"progressiveLoadFactor",null),r=i([d("esri.views.3d.layers.SceneLayerView3D")],r);const pt=r;export{pt as default};
