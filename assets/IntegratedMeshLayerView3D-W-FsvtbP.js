import{a1 as n,P as p,a2 as m,e as i,y as o,a3 as l,c as d}from"./index-W_I7VDCj.js";import{E as c}from"./I3SMeshView3D-MPPa3gjT.js";import{n as u}from"./LayerView3D-iCiVurOC.js";import{u as h}from"./LayerView-zVMmjoz2.js";import"./I3SOverrides-xf-Sj0zC.js";import"./I3SNode-M7DvVxjb.js";import"./I3SUtil-Mj6tYvul.js";import"./I3SBinaryReader-nyCTU3VW.js";import"./ReactiveSet-5lCvlAkt.js";import"./meshFeatureSet-0q8kK2I9.js";import"./External-YeFz2Zdq.js";import"./FeatureLayerView3D-seU4v0PB.js";import"./FeatureLayerViewBase3D-2dXuE8KW.js";import"./HeatmapDensity.glsl-mAG0LXhn.js";import"./dehydratedFeatureComparison-tj6g1AQ7.js";import"./queryForSymbologySnapping-0i3bpRMj.js";import"./elevationInfoUtils-gKA30VK1.js";import"./hash-SS5GKVPY.js";import"./Graphics3DObjectStates-S_EVuXGG.js";import"./optimizedFeatureQueryEngineAdapter-g8Bo4qXH.js";import"./PooledRBush-n7HFMl0f.js";import"./quickselect-CPp8VAzG.js";import"./popupUtils-Z48XOntr.js";import"./floorFilterUtils-zOdaZIyV.js";import"./QueryEngine-UgNojBPk.js";import"./WhereClause-Nwi0gTQO.js";import"./TimeOnly-KFaAa__T.js";import"./json-v6EOeNTY.js";import"./QueryEngineCapabilities-PzVpW5yD.js";import"./utils-EPLWkLlc.js";import"./utils-eLi72N_y.js";import"./generateRendererUtils-ZrKX0XgH.js";import"./FeatureStore-nnooPZBd.js";import"./BoundsStore-T6_gIoDW.js";import"./projectExtentUtils-IqiAj0_h.js";import"./query-_jmOC7k5.js";import"./pbfQueryUtils-DRU6xyVQ.js";import"./pbf-1hkvlj5a.js";import"./EventedSet-8H7TieLm.js";import"./RefreshableLayerView-e_PXBFrH.js";import"./SceneModification-U5g9fg_t.js";import"./persistable-SSi_TK4C.js";import"./multiOriginJSONSupportUtils-R5XHSAtL.js";import"./resourceExtension-ByhhXoR2.js";import"./SceneLayerWorker-bBcYELaz.js";const g=.2;let r=class extends c(u(h)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this.drapeTargetType=n.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var t;return((t=this._controller)==null?void 0:t.updatingProgress)??0}get lodFactor(){var t,e,a,s;return((s=(a=(e=(t=this.view)==null?void 0:t.qualitySettings)==null?void 0:e.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?g:1}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this._updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){const t=new m;return t.layer=this.layer,t.sourceLayer=this.layer,t}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.removeHandles("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const t=this.layer.modifications;this.addHandles(this._updatingHandles.addOnCollectionChange(()=>t,()=>this._modifications=t.toArray(),p),"modifications")}};i([o()],r.prototype,"layer",void 0),i([o()],r.prototype,"i3slayer",null),i([o(l)],r.prototype,"updatingProgress",void 0),i([o()],r.prototype,"updatingProgressValue",null),i([o()],r.prototype,"lodFactor",null),i([o({readOnly:!0})],r.prototype,"progressiveLoadFactor",null),r=i([d("esri.views.3d.layers.SceneLayerView3D")],r);const pt=r;export{pt as default};
