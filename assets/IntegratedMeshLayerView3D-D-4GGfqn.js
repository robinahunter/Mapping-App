import{a1 as n,P as p,a2 as m,e as i,y as o,a3 as l,c as d}from"./index-PUriptlK.js";import{E as c}from"./I3SMeshView3D-EHx19KwX.js";import{n as u}from"./LayerView3D-Aom7k4Gm.js";import{u as h}from"./LayerView-C4EbPmlo.js";import"./I3SOverrides-zZoOpWJT.js";import"./I3SNode-zux16fXZ.js";import"./I3SUtil-P0AaaBqN.js";import"./I3SBinaryReader-ccpSoG7K.js";import"./ReactiveSet-iMRZK4Zy.js";import"./meshFeatureSet-xDJJtMHR.js";import"./External-QfN4yDzk.js";import"./FeatureLayerView3D-V7p3egsj.js";import"./FeatureLayerViewBase3D-cjnfvtHI.js";import"./HeatmapDensity.glsl-Yi_yA5Rq.js";import"./dehydratedFeatureComparison-_kj8uP5D.js";import"./queryForSymbologySnapping-AXDQOZ2M.js";import"./elevationInfoUtils-URIf6t3f.js";import"./hash-SS5GKVPY.js";import"./Graphics3DObjectStates-O_7oBFTB.js";import"./optimizedFeatureQueryEngineAdapter-jKiGTNRH.js";import"./PooledRBush-dugGqMKg.js";import"./quickselect-QSc4Dzi_.js";import"./popupUtils-ZBCJfIS_.js";import"./floorFilterUtils-zOdaZIyV.js";import"./QueryEngine-bLozczRJ.js";import"./WhereClause-Th43Sn_L.js";import"./TimeOnly-ZeTG9DH1.js";import"./json-v6EOeNTY.js";import"./QueryEngineCapabilities-PzVpW5yD.js";import"./utils-xQABDeJI.js";import"./utils-p_z8LD7a.js";import"./generateRendererUtils-Rhzz7n9x.js";import"./FeatureStore-ypB41uam.js";import"./BoundsStore-q-IMVoUu.js";import"./projectExtentUtils-MCt89W8T.js";import"./query-9HY_k1wv.js";import"./pbfQueryUtils-nVa5X3dB.js";import"./pbf-cZiuVq0c.js";import"./EventedSet-o7rcUft1.js";import"./RefreshableLayerView-bnz7w2Xh.js";import"./SceneModification-cRIIvjOv.js";import"./persistable-5DYR0wA8.js";import"./multiOriginJSONSupportUtils-R5XHSAtL.js";import"./resourceExtension-YXa-7m8B.js";import"./SceneLayerWorker-QlMoWItw.js";const g=.2;let r=class extends c(u(h)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this.drapeTargetType=n.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var t;return((t=this._controller)==null?void 0:t.updatingProgress)??0}get lodFactor(){var t,e,a,s;return((s=(a=(e=(t=this.view)==null?void 0:t.qualitySettings)==null?void 0:e.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?g:1}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this._updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){const t=new m;return t.layer=this.layer,t.sourceLayer=this.layer,t}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.removeHandles("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const t=this.layer.modifications;this.addHandles(this._updatingHandles.addOnCollectionChange(()=>t,()=>this._modifications=t.toArray(),p),"modifications")}};i([o()],r.prototype,"layer",void 0),i([o()],r.prototype,"i3slayer",null),i([o(l)],r.prototype,"updatingProgress",void 0),i([o()],r.prototype,"updatingProgressValue",null),i([o()],r.prototype,"lodFactor",null),i([o({readOnly:!0})],r.prototype,"progressiveLoadFactor",null),r=i([d("esri.views.3d.layers.SceneLayerView3D")],r);const pt=r;export{pt as default};
